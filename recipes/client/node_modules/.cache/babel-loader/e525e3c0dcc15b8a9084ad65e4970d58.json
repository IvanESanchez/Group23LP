{"ast":null,"code":"import api from '../utils/api';\nimport { setAlert } from './alert';\nimport { GET_RECIPES, POST_ERROR, UPDATE_LIKES, DELETE_RECIPE, ADD_RECIPE, GET_RECIPE, ADD_COMMENT, REMOVE_COMMENT } from './types'; // Get recipes\n\nexport const getRecipes = () => async dispatch => {\n  try {\n    const res = await api.get('/recipes');\n    dispatch({\n      type: GET_RECIPES,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add like\n\nexport const addLike = id => async dispatch => {\n  try {\n    const res = await api.put(`/recipes/like/${id}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        id,\n        likes: res.data\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Remove like\n\nexport const removeLike = id => async dispatch => {\n  try {\n    const res = await api.put(`/recipes/unlike/${id}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        id,\n        likes: res.data\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete recipe\n\nexport const deleteRecipe = id => async dispatch => {\n  try {\n    await api.delete(`/recipes/${id}`);\n    dispatch({\n      type: DELETE_RECIPE,\n      payload: id\n    });\n    dispatch(setAlert('Recipe Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add recipe\n\nexport const addRecipe = formData => async dispatch => {\n  try {\n    const res = await api.post('/recipes', formData);\n    dispatch({\n      type: ADD_RECIPE,\n      payload: res.data\n    });\n    dispatch(setAlert('Recipe Created', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get recipe\n\nexport const getRecipe = id => async dispatch => {\n  try {\n    const res = await api.get(`/recipes/${id}`);\n    dispatch({\n      type: GET_RECIPE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add comment\n\nexport const addComment = (recipeId, formData) => async dispatch => {\n  try {\n    const res = await api.post(`/recipes/comment/${recipeId}`, formData);\n    dispatch({\n      type: ADD_COMMENT,\n      payload: res.data\n    });\n    dispatch(setAlert('Comment Added', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete comment\n\nexport const deleteComment = (recipeId, commentId) => async dispatch => {\n  try {\n    await api.delete(`/recipes/comment/${recipeId}/${commentId}`);\n    dispatch({\n      type: REMOVE_COMMENT,\n      payload: commentId\n    });\n    dispatch(setAlert('Comment Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/mnt/c/Users/laura/Desktop/recipes/client/src/actions/recipe.js"],"names":["api","setAlert","GET_RECIPES","POST_ERROR","UPDATE_LIKES","DELETE_RECIPE","ADD_RECIPE","GET_RECIPE","ADD_COMMENT","REMOVE_COMMENT","getRecipes","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","addLike","id","put","likes","removeLike","deleteRecipe","delete","addRecipe","formData","post","getRecipe","addComment","recipeId","deleteComment","commentId"],"mappings":"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","sourcesContent":["import api from '../utils/api';\r\nimport { setAlert } from './alert';\r\nimport {\r\n  GET_RECIPES,\r\n  POST_ERROR,\r\n  UPDATE_LIKES,\r\n  DELETE_RECIPE,\r\n  ADD_RECIPE,\r\n  GET_RECIPE,\r\n  ADD_COMMENT,\r\n  REMOVE_COMMENT\r\n} from './types';\r\n\r\n// Get recipes\r\nexport const getRecipes = () => async dispatch => {\r\n  try {\r\n    const res = await api.get('/recipes');\r\n\r\n    dispatch({\r\n      type: GET_RECIPES,\r\n      payload: res.data\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: POST_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n\r\n// Add like\r\nexport const addLike = id => async dispatch => {\r\n  try {\r\n    const res = await api.put(`/recipes/like/${id}`);\r\n\r\n    dispatch({\r\n      type: UPDATE_LIKES,\r\n      payload: { id, likes: res.data }\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: POST_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n\r\n// Remove like\r\nexport const removeLike = id => async dispatch => {\r\n  try {\r\n    const res = await api.put(`/recipes/unlike/${id}`);\r\n\r\n    dispatch({\r\n      type: UPDATE_LIKES,\r\n      payload: { id, likes: res.data }\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: POST_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n\r\n// Delete recipe\r\nexport const deleteRecipe = id => async dispatch => {\r\n  try {\r\n    await api.delete(`/recipes/${id}`);\r\n\r\n    dispatch({\r\n      type: DELETE_RECIPE,\r\n      payload: id\r\n    });\r\n\r\n    dispatch(setAlert('Recipe Removed', 'success'));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: POST_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n\r\n// Add recipe\r\nexport const addRecipe = formData => async dispatch => {\r\n  try {\r\n    const res = await api.post('/recipes', formData);\r\n\r\n    dispatch({\r\n      type: ADD_RECIPE,\r\n      payload: res.data\r\n    });\r\n\r\n    dispatch(setAlert('Recipe Created', 'success'));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: POST_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n\r\n// Get recipe\r\nexport const getRecipe = id => async dispatch => {\r\n  try {\r\n    const res = await api.get(`/recipes/${id}`);\r\n\r\n    dispatch({\r\n      type: GET_RECIPE,\r\n      payload: res.data\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: POST_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n\r\n// Add comment\r\nexport const addComment = (recipeId, formData) => async dispatch => {\r\n  try {\r\n    const res = await api.post(`/recipes/comment/${recipeId}`, formData);\r\n\r\n    dispatch({\r\n      type: ADD_COMMENT,\r\n      payload: res.data\r\n    });\r\n\r\n    dispatch(setAlert('Comment Added', 'success'));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: POST_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n\r\n// Delete comment\r\nexport const deleteComment = (recipeId, commentId) => async dispatch => {\r\n  try {\r\n    await api.delete(`/recipes/comment/${recipeId}/${commentId}`);\r\n\r\n    dispatch({\r\n      type: REMOVE_COMMENT,\r\n      payload: commentId\r\n    });\r\n\r\n    dispatch(setAlert('Comment Removed', 'success'));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: POST_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}